{
  "association_by_datasource_direct": {
    "datasourceId": "string",
    "datatypeId": "string",
    "diseaseId": "string",
    "evidenceCount": "int64",
    "score": "double",
    "targetId": "string"
  },
  "association_by_datasource_indirect": {
    "datasourceId": "string",
    "datatypeId": "string",
    "diseaseId": "string",
    "evidenceCount": "int64",
    "score": "double",
    "targetId": "string"
  },
  "association_by_datatype_direct": {
    "datatypeId": "string",
    "diseaseId": "string",
    "evidenceCount": "int64",
    "score": "double",
    "targetId": "string"
  },
  "association_by_datatype_indirect": {
    "datatypeId": "string",
    "diseaseId": "string",
    "evidenceCount": "int64",
    "score": "double",
    "targetId": "string"
  },
  "association_by_overall_indirect": {
    "diseaseId": "string",
    "evidenceCount": "int64",
    "score": "double",
    "targetId": "string"
  },
  "association_overall_direct": {
    "diseaseId": "string",
    "evidenceCount": "int64",
    "score": "double",
    "targetId": "string"
  },
  "biosample": {
    "ancestors": "list<element: string>",
    "biosampleId": "string",
    "biosampleName": "string",
    "children": "list<element: string not null>",
    "descendants": "list<element: string>",
    "description": "string",
    "parents": "list<element: string not null>",
    "synonyms": "list<element: string>",
    "xrefs": "list<element: string>"
  },
  "colocalisation_coloc": {
    "betaRatioSignAverage": "double",
    "chromosome": "string",
    "colocalisationMethod": "string",
    "h0": "double",
    "h1": "double",
    "h2": "double",
    "h3": "double",
    "h4": "double",
    "leftStudyLocusId": "string",
    "numberColocalisingVariants": "int64",
    "rightStudyLocusId": "string",
    "rightStudyType": "string"
  },
  "colocalisation_ecaviar": {
    "betaRatioSignAverage": "double",
    "chromosome": "string",
    "clpp": "double",
    "colocalisationMethod": "string",
    "leftStudyLocusId": "string",
    "numberColocalisingVariants": "int64",
    "rightStudyLocusId": "string",
    "rightStudyType": "string"
  },
  "credible_set": {
    "beta": "double",
    "chromosome": "string",
    "confidence": "string",
    "credibleSetIndex": "int32",
    "credibleSetlog10BF": "double",
    "effectAlleleFrequencyFromSource": "float",
    "finemappingMethod": "string",
    "isTransQtl": "bool",
    "ldSet": "list<element: struct<tagVariantId: string, r2Overall: double>>",
    "locus": "list<element: struct<is95CredibleSet: bool, is99CredibleSet: bool, logBF: double, posteriorProbability: double, variantId: string, pValueMantissa: float, pValueExponent: int32, beta: double, standardError: double, r2Overall: double>>",
    "locusEnd": "int32",
    "locusStart": "int32",
    "pValueExponent": "int32",
    "pValueMantissa": "float",
    "position": "int32",
    "purityMeanR2": "double",
    "purityMinR2": "double",
    "qualityControls": "list<element: string>",
    "region": "string",
    "sampleSize": "int32",
    "standardError": "double",
    "studyId": "string",
    "studyLocusId": "string",
    "studyType": "string",
    "subStudyDescription": "string",
    "variantId": "string",
    "zScore": "double"
  },
  "disease": {
    "ancestors": "large_list<element: large_string>",
    "children": "large_list<element: large_string>",
    "code": "large_string",
    "dbXRefs": "large_list<element: large_string>",
    "descendants": "large_list<element: large_string>",
    "description": "large_string",
    "id": "large_string",
    "name": "large_string",
    "obsoleteTerms": "large_list<element: large_string>",
    "obsoleteXRefs": "large_list<element: large_string>",
    "ontology": "struct<isTherapeuticArea: bool, leaf: bool, sources: struct<url: large_string, name: large_string>>",
    "parents": "large_list<element: large_string>",
    "synonyms": "struct<hasExactSynonym: large_list<element: large_string>, hasRelatedSynonym: large_list<element: large_string>, hasNarrowSynonym: large_list<element: large_string>, hasBroadSynonym: large_list<element: large_string>>",
    "therapeuticAreas": "large_list<element: large_string>"
  },
  "disease_hpo": {
    "dbXRefs": "large_list<element: large_string>",
    "description": "large_string",
    "id": "large_string",
    "name": "large_string",
    "obsoleteTerms": "large_list<element: large_string>",
    "parents": "large_list<element: large_string>"
  },
  "disease_phenotype": {
    "disease": "large_string",
    "evidence": "large_list<element: struct<aspect: large_string, bioCuration: large_string, diseaseFromSourceId: large_string, diseaseFromSource: large_string, diseaseName: large_string, evidenceType: large_string, frequency: large_string, modifiers: large_list<element: large_string>, onset: large_list<element: large_string>, qualifier: large_string, qualifierNot: bool, references: large_list<element: large_string>, sex: large_string, resource: large_string>>",
    "phenotype": "large_string"
  },
  "drug_indication": {
    "approvedIndications": "list<element: string not null>",
    "id": "string",
    "indicationCount": "int32",
    "indications": "list<element: struct<disease: string, efoName: string, references: list<element: struct<source: string, ids: list<element: string not null> not null> not null> not null, maxPhaseForIndication: double> not null>"
  },
  "drug_mechanism_of_action": {
    "actionType": "string",
    "chemblIds": "list<element: string>",
    "mechanismOfAction": "string",
    "references": "list<element: struct<source: string, ids: list<element: string not null> not null, urls: list<element: string not null> not null> not null>",
    "targetName": "string",
    "targetType": "string",
    "targets": "list<element: string not null>"
  },
  "drug_molecule": {
    "blackBoxWarning": "bool",
    "canonicalSmiles": "string",
    "childChemblIds": "list<element: string not null>",
    "crossReferences": "list<element: struct<source: string not null, ids: list<element: string>> not null>",
    "description": "string",
    "drugType": "string",
    "hasBeenWithdrawn": "bool",
    "id": "string",
    "inchiKey": "string",
    "isApproved": "bool",
    "linkedDiseases": "struct<rows: list<element: string> not null, count: int32 not null>",
    "linkedTargets": "struct<rows: list<element: string not null> not null, count: int32 not null>",
    "maximumClinicalTrialPhase": "double",
    "name": "string",
    "parentId": "string",
    "synonyms": "list<element: string>",
    "tradeNames": "list<element: string>",
    "yearOfFirstApproval": "int64"
  },
  "drug_warning": {
    "chemblIds": "list<element: string>",
    "country": "string",
    "description": "string",
    "efo_id": "string",
    "efo_id_for_warning_class": "string",
    "efo_term": "string",
    "id": "int64",
    "references": "list<element: struct<ref_id: string, ref_type: string, ref_url: string>>",
    "toxicityClass": "string",
    "warningType": "string",
    "year": "int64"
  },
  "expression": {
    "id": "string",
    "tissues": "list<element: struct<efo_code: string, label: string, organs: list<element: string>, anatomical_systems: list<element: string>, rna: struct<value: double, zscore: int32, level: int32, unit: string> not null, protein: struct<reliability: bool, level: int32, cell_type: list<element: struct<name: string, reliability: bool, level: int32> not null> not null> not null> not null>"
  },
  "go": {
    "id": "string",
    "name": "string"
  },
  "interaction": {
    "count": "int64",
    "intA": "string",
    "intABiologicalRole": "string",
    "intB": "string",
    "intBBiologicalRole": "string",
    "scoring": "double",
    "sourceDatabase": "string",
    "speciesA": "struct<mnemonic: string, scientific_name: string, taxon_id: int64>",
    "speciesB": "struct<mnemonic: string, scientific_name: string, taxon_id: int64>",
    "targetA": "string",
    "targetB": "string"
  },
  "interaction_evidence": {
    "evidenceScore": "double",
    "expansionMethodMiIdentifier": "string",
    "expansionMethodShortName": "string",
    "hostOrganismScientificName": "string",
    "hostOrganismTaxId": "int64",
    "hostOrganismTissue": "struct<fullName: string, shortName: string, xrefs: list<element: string>>",
    "intA": "string",
    "intABiologicalRole": "string",
    "intASource": "string",
    "intB": "string",
    "intBBiologicalRole": "string",
    "intBSource": "string",
    "interactionDetectionMethodMiIdentifier": "string",
    "interactionDetectionMethodShortName": "string",
    "interactionIdentifier": "string",
    "interactionResources": "struct<databaseVersion: string, sourceDatabase: string>",
    "interactionScore": "double",
    "interactionTypeMiIdentifier": "string",
    "interactionTypeShortName": "string",
    "participantDetectionMethodA": "list<element: struct<miIdentifier: string, shortName: string>>",
    "participantDetectionMethodB": "list<element: struct<miIdentifier: string, shortName: string>>",
    "pubmedId": "string",
    "speciesA": "struct<mnemonic: string, scientificName: string, taxonId: int64>",
    "speciesB": "struct<mnemonic: string, scientificName: string, taxonId: int64>",
    "targetA": "string",
    "targetB": "string"
  },
  "known_drug": {
    "ancestors": "list<element: string>",
    "approvedName": "string",
    "approvedSymbol": "string",
    "diseaseId": "string",
    "drugId": "string",
    "drugType": "string",
    "label": "string",
    "mechanismOfAction": "string",
    "phase": "double",
    "prefName": "string",
    "status": "string",
    "synonyms": "list<element: string>",
    "targetClass": "list<element: string>",
    "targetId": "string",
    "targetName": "string",
    "tradeNames": "list<element: string>",
    "urls": "list<element: struct<niceName: string, url: string>>"
  },
  "l2g_prediction": {
    "features": "list<element: struct<name: string not null, value: float, shapValue: float> not null>",
    "geneId": "string",
    "score": "double",
    "shapBaseValue": "float",
    "studyLocusId": "string"
  },
  "literature": {
    "date": "date32[day]",
    "day": "int32",
    "keywordId": "string",
    "keywordType": "string",
    "month": "int32",
    "pmcid": "string",
    "pmid": "string",
    "relevance": "double",
    "year": "int32"
  },
  "literature_vector": {
    "category": "string",
    "norm": "double",
    "vector": "list<element: double not null>",
    "word": "string"
  },
  "mouse_phenotype": {
    "biologicalModels": "list<element: struct<allelicComposition: string, geneticBackground: string, id: string, literature: list<element: string>>>",
    "modelPhenotypeClasses": "list<element: struct<id: string, label: string>>",
    "modelPhenotypeId": "string",
    "modelPhenotypeLabel": "string",
    "targetFromSourceId": "string",
    "targetInModel": "string",
    "targetInModelEnsemblId": "string",
    "targetInModelMgiId": "string"
  },
  "openfda_significant_adverse_drug_reactions": {
    "chembl_id": "string",
    "count": "int64",
    "critval": "double",
    "event": "string",
    "llr": "double",
    "meddraCode": "string"
  },
  "openfda_significant_adverse_target_reactions": {
    "count": "int64",
    "critval": "double",
    "event": "string",
    "llr": "double",
    "meddraCode": "string",
    "targetId": "string"
  },
  "pharmacogenomics": {
    "datasourceId": "string",
    "datasourceVersion": "string",
    "datatypeId": "string",
    "directionality": "string",
    "drugs": "list<element: struct<drugFromSource: string, drugId: string> not null>",
    "evidenceLevel": "string",
    "genotype": "string",
    "genotypeAnnotationText": "string",
    "genotypeId": "string",
    "haplotypeFromSourceId": "string",
    "haplotypeId": "string",
    "isDirectTarget": "bool",
    "literature": "list<element: string>",
    "pgxCategory": "string",
    "phenotypeFromSourceId": "string",
    "phenotypeText": "string",
    "studyId": "string",
    "targetFromSourceId": "string",
    "variantAnnotation": "list<element: struct<baseAlleleOrGenotype: string, comparisonAlleleOrGenotype: string, directionality: string, effect: string, effectDescription: string, effectType: string, entity: string, literature: string>>",
    "variantFunctionalConsequenceId": "string",
    "variantId": "string",
    "variantRsId": "string"
  },
  "reactome": {
    "ancestors": "list<element: string>",
    "children": "list<element: string>",
    "descendants": "list<element: string>",
    "id": "string",
    "label": "string",
    "parents": "list<element: string>",
    "path": "list<element: list<element: string>>"
  },
  "so": {
    "id": "large_string",
    "label": "large_string"
  },
  "study": {
    "analysisFlags": "list<element: string>",
    "backgroundDiseaseIds": "list<element: string not null>",
    "backgroundTraitFromSourceMappedIds": "list<element: string>",
    "biosampleFromSourceId": "string",
    "biosampleId": "string",
    "cohorts": "list<element: string>",
    "condition": "string",
    "discoverySamples": "list<element: struct<sampleSize: int32, ancestry: string>>",
    "diseaseIds": "list<element: string not null>",
    "geneId": "string",
    "hasSumstats": "bool",
    "initialSampleSize": "string",
    "ldPopulationStructure": "list<element: struct<ldPopulation: string, relativeSampleSize: double>>",
    "nCases": "int32",
    "nControls": "int32",
    "nSamples": "int32",
    "projectId": "string",
    "publicationDate": "string",
    "publicationFirstAuthor": "string",
    "publicationJournal": "string",
    "publicationTitle": "string",
    "pubmedId": "string",
    "qualityControls": "list<element: string>",
    "replicationSamples": "list<element: struct<sampleSize: int32, ancestry: string>>",
    "studyId": "string",
    "studyType": "string",
    "summarystatsLocation": "string",
    "sumstatQCValues": "list<element: struct<QCCheckName: string, QCCheckValue: float>>",
    "traitFromSource": "string",
    "traitFromSourceMappedIds": "list<element: string>"
  },
  "target": {
    "alternativeGenes": "list<element: string>",
    "approvedName": "string",
    "approvedSymbol": "string",
    "biotype": "string",
    "canonicalExons": "list<element: string>",
    "canonicalTranscript": "struct<id: string, chromosome: string, start: int64, end: int64, strand: string>",
    "chemicalProbes": "list<element: struct<control: string, drugId: string, id: string, isHighQuality: bool, mechanismOfAction: list<element: string>, origin: list<element: string>, probeMinerScore: int64, probesDrugsScore: int64, scoreInCells: int64, scoreInOrganisms: int64, targetFromSourceId: string, urls: list<element: struct<niceName: string, url: string>>> not null>",
    "constraint": "list<element: struct<constraintType: string not null, score: float, exp: float, obs: int32, oe: float, oeLower: float, oeUpper: float, upperRank: int32, upperBin: int32, upperBin6: int32> not null>",
    "dbXrefs": "list<element: struct<id: string, source: string>>",
    "functionDescriptions": "list<element: string>",
    "genomicLocation": "struct<chromosome: string, start: int64, end: int64, strand: int32>",
    "go": "list<element: struct<id: string, source: string, evidence: string, aspect: string, geneProduct: string, ecoId: string>>",
    "hallmarks": "struct<attributes: list<element: struct<pmid: int64, description: string, attribute_name: string> not null>, cancerHallmarks: list<element: struct<pmid: int64, description: string, impact: string, label: string> not null>>",
    "homologues": "list<element: struct<speciesId: string, speciesName: string, homologyType: string, targetGeneId: string, isHighConfidence: string, targetGeneSymbol: string, queryPercentageIdentity: double, targetPercentageIdentity: double, priority: int32> not null>",
    "id": "string",
    "nameSynonyms": "list<element: struct<label: string, source: string>>",
    "obsoleteNames": "list<element: struct<label: string, source: string>>",
    "obsoleteSymbols": "list<element: struct<label: string, source: string>>",
    "pathways": "list<element: struct<pathwayId: string, pathway: string, topLevelTerm: string> not null>",
    "proteinIds": "list<element: struct<id: string, source: string> not null>",
    "safetyLiabilities": "list<element: struct<event: string, eventId: string, effects: list<element: struct<direction: string, dosing: string>>, biosamples: list<element: struct<cellFormat: string, cellLabel: string, tissueId: string, tissueLabel: string>>, datasource: string, literature: string, url: string, studies: list<element: struct<description: string, name: string, type: string>>> not null>",
    "subcellularLocations": "list<element: struct<location: string, source: string, termSL: string, labelSL: string>>",
    "symbolSynonyms": "list<element: struct<label: string, source: string>>",
    "synonyms": "list<element: struct<label: string, source: string>>",
    "targetClass": "list<element: struct<id: int64, label: string, level: string not null> not null>",
    "tep": "struct<targetFromSourceId: string, description: string, therapeuticArea: string, url: string>",
    "tractability": "list<element: struct<modality: string not null, id: string not null, value: bool not null> not null>",
    "transcriptIds": "list<element: string>",
    "tss": "int64"
  },
  "target_essentiality": {
    "geneEssentiality": "list<element: struct<depMapEssentiality: list<element: struct<screens: list<element: struct<cellLineName: string, depmapId: string, diseaseCellLineId: string, diseaseFromSource: string, expression: double, geneEffect: double, mutation: string>>, tissueId: string, tissueName: string>>, isEssential: bool> not null>",
    "id": "string"
  },
  "target_prioritisation": {
    "geneticConstraint": "double",
    "hasHighQualityChemicalProbes": "int32",
    "hasLigand": "int32",
    "hasPocket": "int32",
    "hasSafetyEvent": "int32",
    "hasSmallMoleculeBinder": "int32",
    "hasTEP": "int32",
    "isCancerDriverGene": "int32",
    "isInMembrane": "int32",
    "isSecreted": "int32",
    "maxClinicalTrialPhase": "double",
    "mouseKOScore": "double",
    "mouseOrthologMaxIdentityPercentage": "double",
    "paralogMaxIdentityPercentage": "double",
    "targetId": "string",
    "tissueDistribution": "double",
    "tissueSpecificity": "double"
  },
  "variant": {
    "alleleFrequencies": "list<element: struct<populationName: string, alleleFrequency: double> not null>",
    "alternateAllele": "string",
    "chromosome": "string",
    "dbXrefs": "list<element: struct<id: string, source: string> not null>",
    "hgvsId": "string",
    "mostSevereConsequenceId": "string",
    "position": "int32",
    "referenceAllele": "string",
    "rsIds": "list<element: string>",
    "transcriptConsequences": "list<element: struct<variantFunctionalConsequenceIds: list<element: string>, aminoAcidChange: string, uniprotAccessions: list<element: string>, isEnsemblCanonical: bool, codons: string, distanceFromFootprint: int64, distanceFromTss: int64, appris: string, maneSelect: string, targetId: string, impact: string, lofteePrediction: string, siftPrediction: float, polyphenPrediction: float, consequenceScore: float, transcriptIndex: int32, approvedSymbol: string, biotype: string, transcriptId: string> not null>",
    "variantDescription": "string",
    "variantEffect": "list<element: struct<method: string, assessment: string, score: float, assessmentFlag: string, targetId: string, normalisedScore: double>>",
    "variantId": "string"
  }
}